/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScanService } from "../scan.service";
import { ScanCreateInput } from "./ScanCreateInput";
import { Scan } from "./Scan";
import { ScanFindManyArgs } from "./ScanFindManyArgs";
import { ScanWhereUniqueInput } from "./ScanWhereUniqueInput";
import { ScanUpdateInput } from "./ScanUpdateInput";

export class ScanControllerBase {
  constructor(protected readonly service: ScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scan })
  async createScan(@common.Body() data: ScanCreateInput): Promise<Scan> {
    return await this.service.createScan({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scan] })
  @ApiNestedQuery(ScanFindManyArgs)
  async scans(@common.Req() request: Request): Promise<Scan[]> {
    const args = plainToClass(ScanFindManyArgs, request.query);
    return this.service.scans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scan(
    @common.Param() params: ScanWhereUniqueInput
  ): Promise<Scan | null> {
    const result = await this.service.scan({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScan(
    @common.Param() params: ScanWhereUniqueInput,
    @common.Body() data: ScanUpdateInput
  ): Promise<Scan | null> {
    try {
      return await this.service.updateScan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScan(
    @common.Param() params: ScanWhereUniqueInput
  ): Promise<Scan | null> {
    try {
      return await this.service.deleteScan({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
