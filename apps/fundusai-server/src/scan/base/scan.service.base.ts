/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Scan as PrismaScan } from "@prisma/client";

export class ScanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ScanCountArgs, "select">): Promise<number> {
    return this.prisma.scan.count(args);
  }

  async scans<T extends Prisma.ScanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScanFindManyArgs>
  ): Promise<PrismaScan[]> {
    return this.prisma.scan.findMany<Prisma.ScanFindManyArgs>(args);
  }
  async scan<T extends Prisma.ScanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScanFindUniqueArgs>
  ): Promise<PrismaScan | null> {
    return this.prisma.scan.findUnique(args);
  }
  async createScan<T extends Prisma.ScanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScanCreateArgs>
  ): Promise<PrismaScan> {
    return this.prisma.scan.create<T>(args);
  }
  async updateScan<T extends Prisma.ScanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScanUpdateArgs>
  ): Promise<PrismaScan> {
    return this.prisma.scan.update<T>(args);
  }
  async deleteScan<T extends Prisma.ScanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScanDeleteArgs>
  ): Promise<PrismaScan> {
    return this.prisma.scan.delete(args);
  }
}
